function patchsort(){

    //Load all files and lists
    let master_list = import_master_list();
    if(master_list == undefined){
        alert("You need to upload the master file!");
        return;
    }
    let patches = import_security_updates();
    if(patches == undefined){
        alert("You need to upload the Security Updates CSV file!");
        return;
    }
    let no_known_issues = document.getElementById("no_known_issues").checked;
    let known_issues = import_known_issues();
    if(known_issues == undefined && no_known_issues == false){
        alert("You need to paste the table of known issues in the 'Known Issues' field!");
        return;
    }
    console.log("Files loaded successfully.");

    //collect patches for each group
    let results = [];
    results.push("======================\n");
    results.push("GENERATED BY PATCHSORT\n");
    results.push("DATE: " + get_date_string() + "\n");
    results.push("======================\n");
    let group_list = collect_groups(master_list);
    let user_warned_of_unassigned = false;
    for(let i=0; i<group_list.length; i++) {

        let group = group_list[i];
        console.log("Processing group: " + group);

        //collect all the lists for this group
        let group_products = [];
        let group_critical_cve = [];
        let group_important_cve = [];
        let group_moderate_cve = [];
        let group_low_cve = [];
        let group_articles = [];
        let group_known_issues = [];
        for(let j=0; j<patches.length; j++){
            if(is_responsible(patches[j].product, patches[j].platform, master_list, group)){

                if(group_products.indexOf(patches[j].product) == -1){
                    group_products.push(patches[j].product);
                }

                if(group == "UNASSIGNED") {
                    if(!user_warned_of_unassigned){
                        if (confirm("There are unassigned products in this patch list! Would you like to continue?")) {
                            user_warned_of_unassigned = true;
                        } else {
                            alert("The sort has been aborted.");
                            return;
                        }
                    }
                }else if(group != "IGNORE"){
                    switch(patches[j].severity){
                        case "Critical":
                            if(group_critical_cve.indexOf(patches[j].details) == -1){
                                group_critical_cve.push(patches[j].details);
                            }
                            break;
                        case "Important":
                            if(group_important_cve.indexOf(patches[j].details) == -1){
                                group_important_cve.push(patches[j].details);
                            }
                            break;
                        case "Moderate":
                            if(group_moderate_cve.indexOf(patches[j].details) == -1){
                                group_moderate_cve.push(patches[j].details);
                            }
                            break;
                        default:
                            if(group_low_cve.indexOf(patches[j].details) == -1){
                                group_low_cve.push(patches[j].details);
                            }
                    }

                    if(is_article(patches[j].article) && group_articles.indexOf(patches[j].article) == -1){
                        group_articles.push(patches[j].article);
                    }

                    if(no_known_issues){
                        console.log("No known issues");
                    }else{
                        let known_issue = get_known_issue(known_issues, patches[j].article);
                        if(known_issue != undefined && group_known_issues.indexOf(known_issue) == -1){
                            group_known_issues.push(known_issue);
                        }
                    }
                }
            }
        }
        console.log(group_products.length + " products.");

        //add all the details for this group to the results
        alphabetize(group_products);
        if(group != "UNASSIGNED" && group != "IGNORE") {
            alphabetize(group_critical_cve);
            alphabetize(group_important_cve);
            alphabetize(group_moderate_cve);
            alphabetize(group_low_cve);
            alphabetize(group_articles);
            alphabetize(group_known_issues);
            results.push("\n== List for " + group + " ==\n");
            if(group_products.length > 0){
                results.push("\nProducts:\n\n");
                for (let j = 0; j < group_products.length; j++) {
                    results.push(group_products[j] + "\n");
                }
            }
            if(group_critical_cve.length > 0 || group_important_cve.length > 0 || group_moderate_cve.length >  0 || group_low_cve.length > 0){
                results.push("\nDetails:\n");
                if (group_critical_cve.length > 0) {
                    results.push("\nCritical\n\n");
                    for (let j = 0; j < group_critical_cve.length; j++) {
                        results.push(group_critical_cve[j] + "\n");
                    }
                }
                if (group_important_cve.length > 0) {
                    results.push("\nImportant\n\n");
                    for (let j = 0; j < group_important_cve.length; j++) {
                        results.push(group_important_cve[j] + "\n");
                    }
                }
                if (group_moderate_cve.length > 0) {
                    results.push("\nModerate\n\n");
                    for (let j = 0; j < group_moderate_cve.length; j++) {
                        results.push(group_moderate_cve[j] + "\n");
                    }
                }
                if (group_low_cve.length > 0) {
                    results.push("\nLow\n\n");
                    for (let j = 0; j < group_low_cve.length; j++) {
                        results.push(group_low_cve[j] + "\n");
                    }
                }
            }

            if(group_articles.length > 0){
                results.push("\nArticles:\n\n");
                for (let j = 0; j < group_articles.length; j++) {
                    results.push(group_articles[j] + "\n");
                }
            }

            if (no_known_issues) {
                results.push("\nNo known issues.\n\n");
            } else {
                results.push("\nKnown Issues Apply To:\n\n");
                for (let j = 0; j < group_known_issues.length; j++) {
                    results.push(group_known_issues[j] + "\n");
                }
            }
        }else if (group_products.length > 0){ //lists for IGNORE and UNASSIGNED
            results.push("\n== " + group + " ==\n\n");
            for (let j = 0; j < group_products.length; j++) {
                results.push(group_products[j] + "\n");
            }
        }
    }

    //prompt the user to download the sorting results
    download_results(results);
}